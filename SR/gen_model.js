function loadModelGraph(operand_input, weights_buffer, builder) {
    let conv2d_options = {};
    let operand_value = new Float32Array(weights_buffer, 0, 864);
    let operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 3, 3, 3] };
    const operand_head_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 3456, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_head_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_head_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_1 = builder.conv2d(operand_input, operand_head_0_weight, conv2d_options);
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 3584, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_0_body_0_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 40448, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_0_body_0_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_0_body_0_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_4 = builder.conv2d(operand_input_1, operand_body_0_body_0_body_0_weight, conv2d_options);
    const operand_onnx_Conv_153 = builder.relu(operand_input_4)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 40576, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_0_body_0_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 77440, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_0_body_0_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_0_body_0_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_8 = builder.conv2d(operand_onnx_Conv_153, operand_body_0_body_0_body_2_weight, conv2d_options);
    let average_pool_window = operand_input_8.shape().slice(-2);
    let average_pool_output_size = operand_input_8.shape().slice(0, -2);
    let pool2d_options = {};
    pool2d_options.windowDimensions = average_pool_window
    const operand_input_12 = builder.averagePool2d(operand_input_8, pool2d_options)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 77568, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2, 32, 1, 1] };
    const operand_body_0_body_0_body_3_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 77824, 2);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2] };
    const operand_body_0_body_0_body_3_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_0_body_0_body_3_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_input_16 = builder.conv2d(operand_input_12, operand_body_0_body_0_body_3_body_0_weight, conv2d_options);
    const operand_onnx_Conv_157 = builder.relu(operand_input_16)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 77832, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 2, 1, 1] };
    const operand_body_0_body_0_body_3_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 78088, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_0_body_0_body_3_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_0_body_0_body_3_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Sigmoid_158 = builder.conv2d(operand_onnx_Conv_157, operand_body_0_body_0_body_3_body_2_weight, conv2d_options);
    const operand_onnx_Mul_159 = builder.sigmoid(operand_onnx_Sigmoid_158)
    const operand_onnx_Add_160 = builder.mul(operand_input_8, operand_onnx_Mul_159)
    const operand_onnx_Conv_161 = builder.add(operand_onnx_Add_160, operand_input_1)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 78216, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_0_body_1_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 115080, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_0_body_1_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_0_body_1_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_20 = builder.conv2d(operand_onnx_Conv_161, operand_body_0_body_1_body_0_weight, conv2d_options);
    const operand_onnx_Conv_163 = builder.relu(operand_input_20)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 115208, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_0_body_1_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 152072, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_0_body_1_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_0_body_1_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_24 = builder.conv2d(operand_onnx_Conv_163, operand_body_0_body_1_body_2_weight, conv2d_options);
    average_pool_window = operand_input_24.shape().slice(-2);
    average_pool_output_size = operand_input_24.shape().slice(0, -2);
    pool2d_options = {};
    pool2d_options.windowDimensions = average_pool_window
    const operand_input_28 = builder.averagePool2d(operand_input_24, pool2d_options)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 152200, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2, 32, 1, 1] };
    const operand_body_0_body_1_body_3_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 152456, 2);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2] };
    const operand_body_0_body_1_body_3_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_0_body_1_body_3_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_input_32 = builder.conv2d(operand_input_28, operand_body_0_body_1_body_3_body_0_weight, conv2d_options);
    const operand_onnx_Conv_167 = builder.relu(operand_input_32)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 152464, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 2, 1, 1] };
    const operand_body_0_body_1_body_3_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 152720, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_0_body_1_body_3_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_0_body_1_body_3_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Sigmoid_168 = builder.conv2d(operand_onnx_Conv_167, operand_body_0_body_1_body_3_body_2_weight, conv2d_options);
    const operand_onnx_Mul_169 = builder.sigmoid(operand_onnx_Sigmoid_168)
    const operand_onnx_Add_170 = builder.mul(operand_input_24, operand_onnx_Mul_169)
    const operand_onnx_Conv_171 = builder.add(operand_onnx_Add_170, operand_onnx_Conv_161)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 152848, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_0_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 189712, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_0_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_0_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Add_172 = builder.conv2d(operand_onnx_Conv_171, operand_body_0_body_2_weight, conv2d_options);
    const operand_onnx_Conv_173 = builder.add(operand_onnx_Add_172, operand_input_1)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 189840, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_1_body_0_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 226704, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_1_body_0_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_1_body_0_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_36 = builder.conv2d(operand_onnx_Conv_173, operand_body_1_body_0_body_0_weight, conv2d_options);
    const operand_onnx_Conv_175 = builder.relu(operand_input_36)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 226832, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_1_body_0_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 263696, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_1_body_0_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_1_body_0_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_40 = builder.conv2d(operand_onnx_Conv_175, operand_body_1_body_0_body_2_weight, conv2d_options);
    average_pool_window = operand_input_40.shape().slice(-2);
    average_pool_output_size = operand_input_40.shape().slice(0, -2);
    pool2d_options = {};
    pool2d_options.windowDimensions = average_pool_window
    const operand_input_44 = builder.averagePool2d(operand_input_40, pool2d_options)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 263824, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2, 32, 1, 1] };
    const operand_body_1_body_0_body_3_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 264080, 2);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2] };
    const operand_body_1_body_0_body_3_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_1_body_0_body_3_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_input_48 = builder.conv2d(operand_input_44, operand_body_1_body_0_body_3_body_0_weight, conv2d_options);
    const operand_onnx_Conv_179 = builder.relu(operand_input_48)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 264088, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 2, 1, 1] };
    const operand_body_1_body_0_body_3_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 264344, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_1_body_0_body_3_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_1_body_0_body_3_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Sigmoid_180 = builder.conv2d(operand_onnx_Conv_179, operand_body_1_body_0_body_3_body_2_weight, conv2d_options);
    const operand_onnx_Mul_181 = builder.sigmoid(operand_onnx_Sigmoid_180)
    const operand_onnx_Add_182 = builder.mul(operand_input_40, operand_onnx_Mul_181)
    const operand_onnx_Conv_183 = builder.add(operand_onnx_Add_182, operand_onnx_Conv_173)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 264472, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_1_body_1_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 301336, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_1_body_1_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_1_body_1_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_52 = builder.conv2d(operand_onnx_Conv_183, operand_body_1_body_1_body_0_weight, conv2d_options);
    const operand_onnx_Conv_185 = builder.relu(operand_input_52)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 301464, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_1_body_1_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 338328, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_1_body_1_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_1_body_1_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_56 = builder.conv2d(operand_onnx_Conv_185, operand_body_1_body_1_body_2_weight, conv2d_options);
    average_pool_window = operand_input_56.shape().slice(-2);
    average_pool_output_size = operand_input_56.shape().slice(0, -2);
    pool2d_options = {};
    pool2d_options.windowDimensions = average_pool_window
    const operand_input_60 = builder.averagePool2d(operand_input_56, pool2d_options)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 338456, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2, 32, 1, 1] };
    const operand_body_1_body_1_body_3_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 338712, 2);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2] };
    const operand_body_1_body_1_body_3_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_1_body_1_body_3_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_input_64 = builder.conv2d(operand_input_60, operand_body_1_body_1_body_3_body_0_weight, conv2d_options);
    const operand_onnx_Conv_189 = builder.relu(operand_input_64)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 338720, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 2, 1, 1] };
    const operand_body_1_body_1_body_3_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 338976, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_1_body_1_body_3_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_1_body_1_body_3_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Sigmoid_190 = builder.conv2d(operand_onnx_Conv_189, operand_body_1_body_1_body_3_body_2_weight, conv2d_options);
    const operand_onnx_Mul_191 = builder.sigmoid(operand_onnx_Sigmoid_190)
    const operand_onnx_Add_192 = builder.mul(operand_input_56, operand_onnx_Mul_191)
    const operand_onnx_Conv_193 = builder.add(operand_onnx_Add_192, operand_onnx_Conv_183)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 339104, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_1_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 375968, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_1_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_1_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Add_194 = builder.conv2d(operand_onnx_Conv_193, operand_body_1_body_2_weight, conv2d_options);
    const operand_onnx_Conv_195 = builder.add(operand_onnx_Add_194, operand_onnx_Conv_173)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 376096, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_2_body_0_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 412960, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_2_body_0_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_2_body_0_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_68 = builder.conv2d(operand_onnx_Conv_195, operand_body_2_body_0_body_0_weight, conv2d_options);
    const operand_onnx_Conv_197 = builder.relu(operand_input_68)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 413088, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_2_body_0_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 449952, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_2_body_0_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_2_body_0_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_72 = builder.conv2d(operand_onnx_Conv_197, operand_body_2_body_0_body_2_weight, conv2d_options);
    average_pool_window = operand_input_72.shape().slice(-2);
    average_pool_output_size = operand_input_72.shape().slice(0, -2);
    pool2d_options = {};
    pool2d_options.windowDimensions = average_pool_window
    const operand_input_76 = builder.averagePool2d(operand_input_72, pool2d_options)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 450080, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2, 32, 1, 1] };
    const operand_body_2_body_0_body_3_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 450336, 2);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2] };
    const operand_body_2_body_0_body_3_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_2_body_0_body_3_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_input_80 = builder.conv2d(operand_input_76, operand_body_2_body_0_body_3_body_0_weight, conv2d_options);
    const operand_onnx_Conv_201 = builder.relu(operand_input_80)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 450344, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 2, 1, 1] };
    const operand_body_2_body_0_body_3_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 450600, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_2_body_0_body_3_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_2_body_0_body_3_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Sigmoid_202 = builder.conv2d(operand_onnx_Conv_201, operand_body_2_body_0_body_3_body_2_weight, conv2d_options);
    const operand_onnx_Mul_203 = builder.sigmoid(operand_onnx_Sigmoid_202)
    const operand_onnx_Add_204 = builder.mul(operand_input_72, operand_onnx_Mul_203)
    const operand_onnx_Conv_205 = builder.add(operand_onnx_Add_204, operand_onnx_Conv_195)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 450728, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_2_body_1_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 487592, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_2_body_1_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_2_body_1_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_84 = builder.conv2d(operand_onnx_Conv_205, operand_body_2_body_1_body_0_weight, conv2d_options);
    const operand_onnx_Conv_207 = builder.relu(operand_input_84)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 487720, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_2_body_1_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 524584, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_2_body_1_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_2_body_1_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_88 = builder.conv2d(operand_onnx_Conv_207, operand_body_2_body_1_body_2_weight, conv2d_options);
    average_pool_window = operand_input_88.shape().slice(-2);
    average_pool_output_size = operand_input_88.shape().slice(0, -2);
    pool2d_options = {};
    pool2d_options.windowDimensions = average_pool_window
    const operand_input_92 = builder.averagePool2d(operand_input_88, pool2d_options)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 524712, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2, 32, 1, 1] };
    const operand_body_2_body_1_body_3_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 524968, 2);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2] };
    const operand_body_2_body_1_body_3_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_2_body_1_body_3_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_input_96 = builder.conv2d(operand_input_92, operand_body_2_body_1_body_3_body_0_weight, conv2d_options);
    const operand_onnx_Conv_211 = builder.relu(operand_input_96)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 524976, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 2, 1, 1] };
    const operand_body_2_body_1_body_3_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 525232, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_2_body_1_body_3_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_2_body_1_body_3_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Sigmoid_212 = builder.conv2d(operand_onnx_Conv_211, operand_body_2_body_1_body_3_body_2_weight, conv2d_options);
    const operand_onnx_Mul_213 = builder.sigmoid(operand_onnx_Sigmoid_212)
    const operand_onnx_Add_214 = builder.mul(operand_input_88, operand_onnx_Mul_213)
    const operand_onnx_Conv_215 = builder.add(operand_onnx_Add_214, operand_onnx_Conv_205)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 525360, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_2_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 562224, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_2_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_2_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Add_216 = builder.conv2d(operand_onnx_Conv_215, operand_body_2_body_2_weight, conv2d_options);
    const operand_onnx_Conv_217 = builder.add(operand_onnx_Add_216, operand_onnx_Conv_195)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 562352, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_3_body_0_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 599216, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_3_body_0_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_3_body_0_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_100 = builder.conv2d(operand_onnx_Conv_217, operand_body_3_body_0_body_0_weight, conv2d_options);
    const operand_onnx_Conv_219 = builder.relu(operand_input_100)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 599344, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_3_body_0_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 636208, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_3_body_0_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_3_body_0_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_104 = builder.conv2d(operand_onnx_Conv_219, operand_body_3_body_0_body_2_weight, conv2d_options);
    average_pool_window = operand_input_104.shape().slice(-2);
    average_pool_output_size = operand_input_104.shape().slice(0, -2);
    pool2d_options = {};
    pool2d_options.windowDimensions = average_pool_window
    const operand_input_108 = builder.averagePool2d(operand_input_104, pool2d_options)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 636336, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2, 32, 1, 1] };
    const operand_body_3_body_0_body_3_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 636592, 2);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2] };
    const operand_body_3_body_0_body_3_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_3_body_0_body_3_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_input_112 = builder.conv2d(operand_input_108, operand_body_3_body_0_body_3_body_0_weight, conv2d_options);
    const operand_onnx_Conv_223 = builder.relu(operand_input_112)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 636600, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 2, 1, 1] };
    const operand_body_3_body_0_body_3_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 636856, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_3_body_0_body_3_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_3_body_0_body_3_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Sigmoid_224 = builder.conv2d(operand_onnx_Conv_223, operand_body_3_body_0_body_3_body_2_weight, conv2d_options);
    const operand_onnx_Mul_225 = builder.sigmoid(operand_onnx_Sigmoid_224)
    const operand_onnx_Add_226 = builder.mul(operand_input_104, operand_onnx_Mul_225)
    const operand_onnx_Conv_227 = builder.add(operand_onnx_Add_226, operand_onnx_Conv_217)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 636984, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_3_body_1_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 673848, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_3_body_1_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_3_body_1_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_116 = builder.conv2d(operand_onnx_Conv_227, operand_body_3_body_1_body_0_weight, conv2d_options);
    const operand_onnx_Conv_229 = builder.relu(operand_input_116)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 673976, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_3_body_1_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 710840, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_3_body_1_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_3_body_1_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_120 = builder.conv2d(operand_onnx_Conv_229, operand_body_3_body_1_body_2_weight, conv2d_options);
    average_pool_window = operand_input_120.shape().slice(-2);
    average_pool_output_size = operand_input_120.shape().slice(0, -2);
    pool2d_options = {};
    pool2d_options.windowDimensions = average_pool_window
    const operand_input_124 = builder.averagePool2d(operand_input_120, pool2d_options)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 710968, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2, 32, 1, 1] };
    const operand_body_3_body_1_body_3_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 711224, 2);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2] };
    const operand_body_3_body_1_body_3_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_3_body_1_body_3_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_input_128 = builder.conv2d(operand_input_124, operand_body_3_body_1_body_3_body_0_weight, conv2d_options);
    const operand_onnx_Conv_233 = builder.relu(operand_input_128)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 711232, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 2, 1, 1] };
    const operand_body_3_body_1_body_3_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 711488, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_3_body_1_body_3_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_3_body_1_body_3_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Sigmoid_234 = builder.conv2d(operand_onnx_Conv_233, operand_body_3_body_1_body_3_body_2_weight, conv2d_options);
    const operand_onnx_Mul_235 = builder.sigmoid(operand_onnx_Sigmoid_234)
    const operand_onnx_Add_236 = builder.mul(operand_input_120, operand_onnx_Mul_235)
    const operand_onnx_Conv_237 = builder.add(operand_onnx_Add_236, operand_onnx_Conv_227)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 711616, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_3_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 748480, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_3_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_3_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Add_238 = builder.conv2d(operand_onnx_Conv_237, operand_body_3_body_2_weight, conv2d_options);
    const operand_onnx_Conv_239 = builder.add(operand_onnx_Add_238, operand_onnx_Conv_217)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 748608, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_4_body_0_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 785472, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_4_body_0_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_4_body_0_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_132 = builder.conv2d(operand_onnx_Conv_239, operand_body_4_body_0_body_0_weight, conv2d_options);
    const operand_onnx_Conv_241 = builder.relu(operand_input_132)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 785600, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_4_body_0_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 822464, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_4_body_0_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_4_body_0_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_136 = builder.conv2d(operand_onnx_Conv_241, operand_body_4_body_0_body_2_weight, conv2d_options);
    average_pool_window = operand_input_136.shape().slice(-2);
    average_pool_output_size = operand_input_136.shape().slice(0, -2);
    pool2d_options = {};
    pool2d_options.windowDimensions = average_pool_window
    const operand_input_140 = builder.averagePool2d(operand_input_136, pool2d_options)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 822592, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2, 32, 1, 1] };
    const operand_body_4_body_0_body_3_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 822848, 2);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2] };
    const operand_body_4_body_0_body_3_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_4_body_0_body_3_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_input_144 = builder.conv2d(operand_input_140, operand_body_4_body_0_body_3_body_0_weight, conv2d_options);
    const operand_onnx_Conv_245 = builder.relu(operand_input_144)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 822856, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 2, 1, 1] };
    const operand_body_4_body_0_body_3_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 823112, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_4_body_0_body_3_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_4_body_0_body_3_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Sigmoid_246 = builder.conv2d(operand_onnx_Conv_245, operand_body_4_body_0_body_3_body_2_weight, conv2d_options);
    const operand_onnx_Mul_247 = builder.sigmoid(operand_onnx_Sigmoid_246)
    const operand_onnx_Add_248 = builder.mul(operand_input_136, operand_onnx_Mul_247)
    const operand_onnx_Conv_249 = builder.add(operand_onnx_Add_248, operand_onnx_Conv_239)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 823240, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_4_body_1_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 860104, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_4_body_1_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_4_body_1_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_148 = builder.conv2d(operand_onnx_Conv_249, operand_body_4_body_1_body_0_weight, conv2d_options);
    const operand_onnx_Conv_251 = builder.relu(operand_input_148)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 860232, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_4_body_1_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 897096, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_4_body_1_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_4_body_1_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_152 = builder.conv2d(operand_onnx_Conv_251, operand_body_4_body_1_body_2_weight, conv2d_options);
    average_pool_window = operand_input_152.shape().slice(-2);
    average_pool_output_size = operand_input_152.shape().slice(0, -2);
    pool2d_options = {};
    pool2d_options.windowDimensions = average_pool_window
    const operand_input_156 = builder.averagePool2d(operand_input_152, pool2d_options)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 897224, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2, 32, 1, 1] };
    const operand_body_4_body_1_body_3_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 897480, 2);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2] };
    const operand_body_4_body_1_body_3_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_4_body_1_body_3_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_input_160 = builder.conv2d(operand_input_156, operand_body_4_body_1_body_3_body_0_weight, conv2d_options);
    const operand_onnx_Conv_255 = builder.relu(operand_input_160)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 897488, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 2, 1, 1] };
    const operand_body_4_body_1_body_3_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 897744, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_4_body_1_body_3_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_4_body_1_body_3_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Sigmoid_256 = builder.conv2d(operand_onnx_Conv_255, operand_body_4_body_1_body_3_body_2_weight, conv2d_options);
    const operand_onnx_Mul_257 = builder.sigmoid(operand_onnx_Sigmoid_256)
    const operand_onnx_Add_258 = builder.mul(operand_input_152, operand_onnx_Mul_257)
    const operand_onnx_Conv_259 = builder.add(operand_onnx_Add_258, operand_onnx_Conv_249)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 897872, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_4_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 934736, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_4_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_4_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Add_260 = builder.conv2d(operand_onnx_Conv_259, operand_body_4_body_2_weight, conv2d_options);
    const operand_onnx_Conv_261 = builder.add(operand_onnx_Add_260, operand_onnx_Conv_239)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 934864, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_5_body_0_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 971728, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_5_body_0_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_5_body_0_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_164 = builder.conv2d(operand_onnx_Conv_261, operand_body_5_body_0_body_0_weight, conv2d_options);
    const operand_onnx_Conv_263 = builder.relu(operand_input_164)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 971856, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_5_body_0_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1008720, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_5_body_0_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_5_body_0_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_168 = builder.conv2d(operand_onnx_Conv_263, operand_body_5_body_0_body_2_weight, conv2d_options);
    average_pool_window = operand_input_168.shape().slice(-2);
    average_pool_output_size = operand_input_168.shape().slice(0, -2);
    pool2d_options = {};
    pool2d_options.windowDimensions = average_pool_window
    const operand_input_172 = builder.averagePool2d(operand_input_168, pool2d_options)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1008848, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2, 32, 1, 1] };
    const operand_body_5_body_0_body_3_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1009104, 2);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2] };
    const operand_body_5_body_0_body_3_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_5_body_0_body_3_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_input_176 = builder.conv2d(operand_input_172, operand_body_5_body_0_body_3_body_0_weight, conv2d_options);
    const operand_onnx_Conv_267 = builder.relu(operand_input_176)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1009112, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 2, 1, 1] };
    const operand_body_5_body_0_body_3_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1009368, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_5_body_0_body_3_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_5_body_0_body_3_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Sigmoid_268 = builder.conv2d(operand_onnx_Conv_267, operand_body_5_body_0_body_3_body_2_weight, conv2d_options);
    const operand_onnx_Mul_269 = builder.sigmoid(operand_onnx_Sigmoid_268)
    const operand_onnx_Add_270 = builder.mul(operand_input_168, operand_onnx_Mul_269)
    const operand_onnx_Conv_271 = builder.add(operand_onnx_Add_270, operand_onnx_Conv_261)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1009496, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_5_body_1_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1046360, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_5_body_1_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_5_body_1_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_180 = builder.conv2d(operand_onnx_Conv_271, operand_body_5_body_1_body_0_weight, conv2d_options);
    const operand_onnx_Conv_273 = builder.relu(operand_input_180)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1046488, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_5_body_1_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1083352, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_5_body_1_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_5_body_1_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_184 = builder.conv2d(operand_onnx_Conv_273, operand_body_5_body_1_body_2_weight, conv2d_options);
    average_pool_window = operand_input_184.shape().slice(-2);
    average_pool_output_size = operand_input_184.shape().slice(0, -2);
    pool2d_options = {};
    pool2d_options.windowDimensions = average_pool_window
    const operand_input_188 = builder.averagePool2d(operand_input_184, pool2d_options)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1083480, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2, 32, 1, 1] };
    const operand_body_5_body_1_body_3_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1083736, 2);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2] };
    const operand_body_5_body_1_body_3_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_5_body_1_body_3_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_input_192 = builder.conv2d(operand_input_188, operand_body_5_body_1_body_3_body_0_weight, conv2d_options);
    const operand_onnx_Conv_277 = builder.relu(operand_input_192)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1083744, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 2, 1, 1] };
    const operand_body_5_body_1_body_3_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1084000, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_5_body_1_body_3_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_5_body_1_body_3_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Sigmoid_278 = builder.conv2d(operand_onnx_Conv_277, operand_body_5_body_1_body_3_body_2_weight, conv2d_options);
    const operand_onnx_Mul_279 = builder.sigmoid(operand_onnx_Sigmoid_278)
    const operand_onnx_Add_280 = builder.mul(operand_input_184, operand_onnx_Mul_279)
    const operand_onnx_Conv_281 = builder.add(operand_onnx_Add_280, operand_onnx_Conv_271)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1084128, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_5_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1120992, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_5_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_5_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Add_282 = builder.conv2d(operand_onnx_Conv_281, operand_body_5_body_2_weight, conv2d_options);
    const operand_onnx_Conv_283 = builder.add(operand_onnx_Add_282, operand_onnx_Conv_261)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1121120, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_6_body_0_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1157984, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_6_body_0_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_6_body_0_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_196 = builder.conv2d(operand_onnx_Conv_283, operand_body_6_body_0_body_0_weight, conv2d_options);
    const operand_onnx_Conv_285 = builder.relu(operand_input_196)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1158112, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_6_body_0_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1194976, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_6_body_0_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_6_body_0_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_200 = builder.conv2d(operand_onnx_Conv_285, operand_body_6_body_0_body_2_weight, conv2d_options);
    average_pool_window = operand_input_200.shape().slice(-2);
    average_pool_output_size = operand_input_200.shape().slice(0, -2);
    pool2d_options = {};
    pool2d_options.windowDimensions = average_pool_window
    const operand_input_204 = builder.averagePool2d(operand_input_200, pool2d_options)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1195104, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2, 32, 1, 1] };
    const operand_body_6_body_0_body_3_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1195360, 2);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2] };
    const operand_body_6_body_0_body_3_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_6_body_0_body_3_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_input_208 = builder.conv2d(operand_input_204, operand_body_6_body_0_body_3_body_0_weight, conv2d_options);
    const operand_onnx_Conv_289 = builder.relu(operand_input_208)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1195368, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 2, 1, 1] };
    const operand_body_6_body_0_body_3_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1195624, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_6_body_0_body_3_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_6_body_0_body_3_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Sigmoid_290 = builder.conv2d(operand_onnx_Conv_289, operand_body_6_body_0_body_3_body_2_weight, conv2d_options);
    const operand_onnx_Mul_291 = builder.sigmoid(operand_onnx_Sigmoid_290)
    const operand_onnx_Add_292 = builder.mul(operand_input_200, operand_onnx_Mul_291)
    const operand_onnx_Conv_293 = builder.add(operand_onnx_Add_292, operand_onnx_Conv_283)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1195752, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_6_body_1_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1232616, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_6_body_1_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_6_body_1_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_212 = builder.conv2d(operand_onnx_Conv_293, operand_body_6_body_1_body_0_weight, conv2d_options);
    const operand_onnx_Conv_295 = builder.relu(operand_input_212)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1232744, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_6_body_1_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1269608, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_6_body_1_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_6_body_1_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_216 = builder.conv2d(operand_onnx_Conv_295, operand_body_6_body_1_body_2_weight, conv2d_options);
    average_pool_window = operand_input_216.shape().slice(-2);
    average_pool_output_size = operand_input_216.shape().slice(0, -2);
    pool2d_options = {};
    pool2d_options.windowDimensions = average_pool_window
    const operand_input_220 = builder.averagePool2d(operand_input_216, pool2d_options)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1269736, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2, 32, 1, 1] };
    const operand_body_6_body_1_body_3_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1269992, 2);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2] };
    const operand_body_6_body_1_body_3_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_6_body_1_body_3_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_input_224 = builder.conv2d(operand_input_220, operand_body_6_body_1_body_3_body_0_weight, conv2d_options);
    const operand_onnx_Conv_299 = builder.relu(operand_input_224)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1270000, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 2, 1, 1] };
    const operand_body_6_body_1_body_3_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1270256, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_6_body_1_body_3_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_6_body_1_body_3_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Sigmoid_300 = builder.conv2d(operand_onnx_Conv_299, operand_body_6_body_1_body_3_body_2_weight, conv2d_options);
    const operand_onnx_Mul_301 = builder.sigmoid(operand_onnx_Sigmoid_300)
    const operand_onnx_Add_302 = builder.mul(operand_input_216, operand_onnx_Mul_301)
    const operand_onnx_Conv_303 = builder.add(operand_onnx_Add_302, operand_onnx_Conv_293)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1270384, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_6_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1307248, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_6_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_6_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Add_304 = builder.conv2d(operand_onnx_Conv_303, operand_body_6_body_2_weight, conv2d_options);
    const operand_onnx_Conv_305 = builder.add(operand_onnx_Add_304, operand_onnx_Conv_283)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1307376, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_7_body_0_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1344240, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_7_body_0_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_7_body_0_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_228 = builder.conv2d(operand_onnx_Conv_305, operand_body_7_body_0_body_0_weight, conv2d_options);
    const operand_onnx_Conv_307 = builder.relu(operand_input_228)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1344368, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_7_body_0_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1381232, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_7_body_0_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_7_body_0_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_232 = builder.conv2d(operand_onnx_Conv_307, operand_body_7_body_0_body_2_weight, conv2d_options);
    average_pool_window = operand_input_232.shape().slice(-2);
    average_pool_output_size = operand_input_232.shape().slice(0, -2);
    pool2d_options = {};
    pool2d_options.windowDimensions = average_pool_window
    const operand_input_236 = builder.averagePool2d(operand_input_232, pool2d_options)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1381360, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2, 32, 1, 1] };
    const operand_body_7_body_0_body_3_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1381616, 2);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2] };
    const operand_body_7_body_0_body_3_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_7_body_0_body_3_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_input_240 = builder.conv2d(operand_input_236, operand_body_7_body_0_body_3_body_0_weight, conv2d_options);
    const operand_onnx_Conv_311 = builder.relu(operand_input_240)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1381624, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 2, 1, 1] };
    const operand_body_7_body_0_body_3_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1381880, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_7_body_0_body_3_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_7_body_0_body_3_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Sigmoid_312 = builder.conv2d(operand_onnx_Conv_311, operand_body_7_body_0_body_3_body_2_weight, conv2d_options);
    const operand_onnx_Mul_313 = builder.sigmoid(operand_onnx_Sigmoid_312)
    const operand_onnx_Add_314 = builder.mul(operand_input_232, operand_onnx_Mul_313)
    const operand_onnx_Conv_315 = builder.add(operand_onnx_Add_314, operand_onnx_Conv_305)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1382008, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_7_body_1_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1418872, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_7_body_1_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_7_body_1_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_244 = builder.conv2d(operand_onnx_Conv_315, operand_body_7_body_1_body_0_weight, conv2d_options);
    const operand_onnx_Conv_317 = builder.relu(operand_input_244)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1419000, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_7_body_1_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1455864, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_7_body_1_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_7_body_1_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_input_248 = builder.conv2d(operand_onnx_Conv_317, operand_body_7_body_1_body_2_weight, conv2d_options);
    average_pool_window = operand_input_248.shape().slice(-2);
    average_pool_output_size = operand_input_248.shape().slice(0, -2);
    pool2d_options = {};
    pool2d_options.windowDimensions = average_pool_window
    const operand_input_252 = builder.averagePool2d(operand_input_248, pool2d_options)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1455992, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2, 32, 1, 1] };
    const operand_body_7_body_1_body_3_body_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1456248, 2);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [2] };
    const operand_body_7_body_1_body_3_body_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_7_body_1_body_3_body_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_input_256 = builder.conv2d(operand_input_252, operand_body_7_body_1_body_3_body_0_weight, conv2d_options);
    const operand_onnx_Conv_321 = builder.relu(operand_input_256)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1456256, 64);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 2, 1, 1] };
    const operand_body_7_body_1_body_3_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1456512, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_7_body_1_body_3_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_7_body_1_body_3_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [0, 0, 0, 0];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Sigmoid_322 = builder.conv2d(operand_onnx_Conv_321, operand_body_7_body_1_body_3_body_2_weight, conv2d_options);
    const operand_onnx_Mul_323 = builder.sigmoid(operand_onnx_Sigmoid_322)
    const operand_onnx_Add_324 = builder.mul(operand_input_248, operand_onnx_Mul_323)
    const operand_onnx_Conv_325 = builder.add(operand_onnx_Add_324, operand_onnx_Conv_315)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1456640, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_7_body_2_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1493504, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_7_body_2_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_7_body_2_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Add_326 = builder.conv2d(operand_onnx_Conv_325, operand_body_7_body_2_weight, conv2d_options);
    const operand_onnx_Conv_327 = builder.add(operand_onnx_Add_326, operand_onnx_Conv_305)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1493632, 9216);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32, 32, 3, 3] };
    const operand_body_8_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1530496, 32);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [32] };
    const operand_body_8_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_body_8_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_onnx_Add_328 = builder.conv2d(operand_onnx_Conv_327, operand_body_8_weight, conv2d_options);
    const operand_onnx_Conv_329 = builder.add(operand_onnx_Add_328, operand_input_1)
    conv2d_options = {};
    operand_value = new Float32Array(weights_buffer, 1530624, 3456);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [12, 32, 3, 3] };
    const operand_tail_0_weight = builder.constant(operand_desc, operand_value);
    operand_value = new Float32Array(weights_buffer, 1544448, 12);
    operand_desc = { type: 'float32', dataType: 'float32', dimensions: [12] };
    const operand_tail_0_bias = builder.constant(operand_desc, operand_value);
    conv2d_options.bias = operand_tail_0_bias
    conv2d_options.dilations = [1, 1];
    conv2d_options.groups = 1;
    conv2d_options.padding = [1, 1, 1, 1];
    conv2d_options.strides = [1, 1];
    let operand_onnx_DepthToSpace_330 = builder.conv2d(operand_onnx_Conv_329, operand_tail_0_weight, conv2d_options);
    let depth_to_space_shape = operand_onnx_DepthToSpace_330.shape();
    let depth_to_space_tmp = builder.reshape(operand_onnx_DepthToSpace_330, [depth_to_space_shape[0], depth_to_space_shape[1] / 4, 2, 2, depth_to_space_shape[2], depth_to_space_shape[3]])
    let transpose_options = {}
    transpose_options.permutation = [0, 1, 4, 2, 5, 3]
    depth_to_space_tmp = builder.transpose(depth_to_space_tmp, transpose_options)
    operand_output = builder.reshape(depth_to_space_tmp, [depth_to_space_shape[0], depth_to_space_shape[1] / 4, depth_to_space_shape[2] * 2, depth_to_space_shape[3] * 2])
    return operand_output;
}
