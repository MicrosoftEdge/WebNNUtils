const operandType = {type: 'float32',
    dataType: 'float32', dimensions: [2, 2]};
const context = await navigator.ml.createContext(
    {'deviceType' : 'gpu'});
const builder = new MLGraphBuilder(context);
// 1. Create a computational graph 'C = A + B'.
const A = builder.input('A', operandType);
const B = builder.input('B', operandType);
const C = builder.add(A, B);
// 2. Build the graph into an executable.
const graph = await builder.build({'C': C});

// 3. Bind inputs to the graph and execute for the result.
const bufferA = new Float32Array(4).fill(1.0);
const bufferB = new Float32Array(4).fill(0.8);
const bufferC = new Float32Array(4);
const inputs = {'A': bufferA, 'B': bufferB};
const outputs = {'C': bufferC};
const results = await context.compute(graph,
    inputs, outputs);
console.log('Output value: ' + results.outputs.C);