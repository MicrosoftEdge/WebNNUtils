<!DOCTYPE html>
<html>
<script src="CpuOps.js"></script>
<script>
    function log(message)
    {
        document.body.innerText += message;
    }
</script>
<body>

</body>
<script>
async function addDemo(context, builder)
{
    // 1. Create a computational graph 'C = A + B'.
    const operandType = {type: 'float32',
        dataType: 'float32', dimensions: [2, 2]};
    const A = builder.input('A', operandType);
    const B = builder.input('B', operandType);
    const C = builder.add(A, B);
    // 2. Build the graph into an executable.
    const graph = await builder.build({'C': C});
    // 3. Bind inputs to the graph and execute for the result.
    const bufferA = new Float32Array(4).fill(1.0);
    const bufferB = new Float32Array(4).fill(0.8);
    const bufferC = new Float32Array(4);
    const inputs = {'A': bufferA, 'B': bufferB};
    const outputs = {'C': bufferC};
    const results = await context.compute(graph,
        inputs, outputs);
    log('Output value: ' + results.outputs.C);
}

async function main() {
    const context = await navigator.ml.createContext(
        {'deviceType' : 'gpu'});
    const builder = new MLGraphBuilder(context);
    InstallCpuOps(builder);
    const operand__Constant_output_0 = 0
    operand__Gather_output_0 = builder.gather(operand__Shape_output_0, operand__Constant_output_0)
}
main();
</script>
<html>
